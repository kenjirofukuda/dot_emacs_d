                         ━━━━━━━━━━━━━━━━━━━━━━
                          EXPERIMENTAL INIT.EL

                             Kenjiro Fukuda
                         ━━━━━━━━━━━━━━━━━━━━━━


Table of Contents
─────────────────

1. 参考
2. このファイルの使用方法
3. ファイルの生成方法
4. Script Runner
.. 1. TODO あれ、javascript で C-M-\ `indent-region' すると、4space のインデントになってしまう。どこかで見直そう。
5. スタートアップメッセージ
6. 基本設定
7. パッケージ自動アップデート
8. EditorConfig
9. より本物に近いターミナルエミュレータ
.. 1. 前提条件
..... 1. Debian 系列
..... 2. Haiku
.. 2. パッケージ導入
10. 基本関数
11. 外部プロセス更新ファイルのバッファ同期
12. 最近訪れたファイル対応
13. ido
14. オプション
..... 1. DONE 他のホストと、衝突する恐れがある
15. 拡張選択範囲
16. コード補完
17. ミニバッファーの改善
.. 1. vertico, marginalia
.. 2. consult
.. 3. embark
18. Corf
19. ディレクトリ表示の簡素化
20. Magit 設定
21. Lisp ファミリ基本設定
.. 1. emacs lisp
22. DONE 横に広がりすぎて編集しづらい。auto wrapp で単語境界で区切るのは日本語には合わない
23. Org
.. 1. 近代化
.. 2. `<s <tab>' でブロック文のテンプレートを挿入
.. 3. デフォルトのbabelではシェルは禁止されているの使えるようにする
.. 4. DONE 起動時に、自動で折りたたむ設定はどうだったっけ
.. 5. `open-url-at-point' で開かれるブラウザの設定
24. お遊び
.. 1. TODO ポモドーロタイマに使用する音源を物色中
.. 2. eww がローカルのファイルを開けるか
.. 3. string-matchの実験
25. ポモドーロタイマー
26. キーストローク表示
27. 日本語フォントの設定
.. 1. 使用できるフォント名の確認
..... 1. RESULTS(Haiku):
..... 2. RESULTS(Windows):
..... 3. RESULTS(LINUX):
.. 2. 日本語の範囲をNotoフォントに設定
.. 3. 確認用テーブル
.. 4. Notoフォントのインストール
..... 1. Windows
.. 5. Iosevkaフォントのインストール
..... 1. Linux
..... 2. Windows
28. ewwのフォントが汚い件
29. Eglot導入
30. Tree sitter
31. フレームの回転
32. ウィンドウのリサイズ
33. sudo編集
34. Which Key
35. アイコン装飾
36. astyle
37. CMake 対応
38. 末尾のゴミを可視化
39. モードラインをシンプル化
40. Iosevkaを標準フォントに
41. デスクトップのサイズを記憶
42. グローバル高速検索
43. TODO 垂直分割より水分平割を優先する(表現が逆かな)
44. TODO 導入予定
.. 1. TODO narrow時にツリー間の移動を用意にし、プレゼンテーションも行える
.. 2. TODO モードラインに IME 情報が載せられないか?
45. Projectile
46. ObjC
47. ClangFormat
48. GNUstep Renaissance
49. NeoTree
50. Orderless
51. Mozc
52. Haiku Support
.. 1. Setup Jamfile mode
.. 2. Haiku Format
53. マルチプルカーソル
54. Transclude
55. 定型文の挿入
56. Common Lisp環境
57. Free Basic
58. D lang
59. TODO Compile command
60. 末尾





1 参考
══════

  • [Emacs Japanese]
  • <https://takaxp.github.io/org-ja.html>
  • [An Introduction to Programing in Emacs Lisp]
  • <https://www.google.com/>
  • <file:///usr/local/share/GNUstep/Documentation/Developer/Base/ProgrammingManual/gs-base/index.html>
  • <file:///usr/local/share/GNUstep/Documentation/Developer/Base/Reference/Base.html>


[Emacs Japanese]
<https://ayatakesi.github.io/emacs/29.4/html/index.html>

[An Introduction to Programing in Emacs Lisp]
<https://www.gnu.org/software/emacs/manual/html_node/eintr/>


2 このファイルの使用方法
════════════════════════

  ┌────
  │ alias emacs2='emacs -Q -l ~/.emacs.d/experminal-init.el'
  │ # then use: emacs2 <Enter>
  └────


3 ファイルの生成方法
════════════════════

  ┌────
  │ C-c C-v C-t
  └────


4 Script Runner
═══════════════

  これはブラウザの拡張機能であり、以下のソースを GNU Manuals というタイ
  トルのもとに貼り付けて利用すれば、おかしな翻訳を避けることができる。


4.1 TODO あれ、javascript で C-M-\ `indent-region' すると、4space のインデントになってしまう。どこかで見直そう。
────────────────────────────────────────────────────────────────────────────────────────────────────────────────

  ┌────
  │ const classes = [
  │     "example",
  │     "category-def",
  │     "def-name",
  │     "def-var-arguments"
  │ ]
  │
  │ const qclasses = classes.map((v) => "." + v).join(",")
  │
  │ document.querySelectorAll(qclasses).forEach((el) => {
  │     if (!el.hasAttribute("translate")) {
  │ 	el.setAttribute("translate", "no");
  │     }
  │ });
  └────


5 スタートアップメッセージ
══════════════════════════

  ┌────
  │ ;;; Code:
  │
  │ (with-current-buffer "*scratch*"
  │   (insert ";;; loading Experimental init.el\n")
  │   (insert ";;; Emacs " emacs-version "\n")
  │   (insert "\n")
  │   (insert "\n"))
  │
  │ (when (file-directory-p "~/.emacs.d/lisp")
  │   (push (expand-file-name "~/.emacs.d/lisp") load-path))
  │
  │ (setq gc-cons-threshold 100000000)
  │ (setq read-process-output-max (* 80 1024 1024)) ;; 8mb
  │ ;; カスタムコマンドのロード
  │ (require 'kf-command)
  │ (require 'mpascal)
  │
  │ (add-to-list 'auto-mode-alist
  │ 	     '("\\.\\(p\\|pas\\|dpr\\|dpk\\)\\'" . mpascal-mode))
  └────


6 基本設定
══════════

  ┌────
  │ (setq inhibit-startup-message t)
  │
  │ (scroll-bar-mode -1)        ; Disable visible scrollbar
  │ (tool-bar-mode -1)          ; Disable the toolbar
  │ (tooltip-mode -1)           ; Disable tooltips
  │ (set-fringe-mode 10)        ; Give some breathing room
  │
  │ (menu-bar-mode -1)            ; Disable the menu bar
  │
  │ ;; Set up the visible bell
  │ (setq visible-bell t)
  │
  │ (column-number-mode)
  │ (global-display-line-numbers-mode -1)
  └────


7 パッケージ自動アップデート
════════════════════════════

  ┌────
  │ ;; パッケージアーカイブ
  │ (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  │ (eval-and-compile
  │   (require 'package)
  │   (customize-set-variable
  │    'package-archives '(("org" . "https://orgmode.org/elpa/")
  │ 		       ("melpa" . "https://melpa.org/packages/")
  │ 		       ("melpa-stable" . "https://mstable.elpa.org/packages/")
  │ 		       ("gnu" . "https://elpa.gnu.org/packages/")))
  │   (package-initialize)
  │   (unless package-archive-contents
  │     (package-refresh-contents))
  │
  │   ;; Initialize use-package on non-Linux platforms
  │   (unless (package-installed-p 'use-package)
  │     (package-install 'use-package))
  │
  │   (require 'use-package)
  │   (setq use-package-always-ensure t))
  │
  │ ;; パッケージ自動アップデート
  │ (use-package auto-package-update
  │   :custom
  │   (auto-package-update-interval 7)
  │   (auto-package-update-prompt-before-update t)
  │   (auto-package-update-hide-results t)
  │   :config
  │   (auto-package-update-maybe)
  │   (auto-package-update-at-time "20:00"))
  └────


8 EditorConfig
══════════════

  ┌────
  │ ;; Editor Config
  │ ;; https://editorconfig.org/
  │ (use-package editorconfig
  │   :ensure t
  │   :config
  │   (editorconfig-mode 1))
  └────

  ;; Local Variables: eval: (add-hook 'after-save-hook (lambda ()(if
  ;; (y-or-n-p "Reload?")(load-file user-init-file))) nil t) eval:
  ;; (add-hook 'after-save-hook (lambda ()(if (y-or-n-p
  ;; "Tangle?")(org-babel-tangle))) nil t) End:


9 より本物に近いターミナルエミュレータ
══════════════════════════════════════

  <https://github.com/akermu/emacs-libvterm>


9.1 前提条件
────────────

  Cライブラリをコンパイルして利用するため、コンパイル環境を準備


9.1.1 Debian 系列
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  ┌────
  │ sudo apt install libtool
  │ sudo apt install libtool-bin
  └────


9.1.2 Haiku
╌╌╌╌╌╌╌╌╌╌╌

  ┌────
  │ pkgman install cmake
  │ pkgman install libtool
  └────


9.2 パッケージ導入
──────────────────

  ┌────
  │ ;; より本物に近いターミナルエミュレータ
  │ (use-package vterm
  │   :unless (eq system-type 'windows-nt)
  │   :ensure t)
  └────


10 基本関数
═══════════

  ┌────
  │ ;; 基本関数
  │ (defun replace-in-string (what with in)
  │   (replace-regexp-in-string (regexp-quote what) with in nil 'literal))
  │
  │ (defun safe-system-type-string ()
  │   (replace-in-string "/" "_" (prin1-to-string system-type)))
  │
  │ (defun safe-host-name-string ()
  │   (replace-in-string "/" "_" (downcase (system-name))))
  │
  │ (defun sys-base-name (prefix suffix)
  │   (concat prefix "-" (safe-system-type-string) suffix ))
  │
  │ (defun host-base-name (prefix suffix)
  │   (concat prefix "-" (safe-host-name-string) suffix ))
  └────


11 外部プロセス更新ファイルのバッファ同期
═════════════════════════════════════════

  ┌────
  │ ;; 外部プロセス更新ファイルのバッファ同期
  │ (setq make-backup-files nil)
  │ ;; https://takaxp.github.io/init.html#orgc2257142
  │ (when (require 'auto-save-buffers nil t)
  │
  │   (defun my-ox-hugo-auto-saving-p ()
  │     (when (eq major-mode 'org-mode)
  │       (or (bound-and-true-p org-capture-mode) ;; when activating org-capture
  │ 	  (and (fboundp 'org-entry-get)
  │ 	       (equal "" (org-entry-get (point) "EXPORT_FILE_NAME"))))))
  │
  │   (defun my-auto-save-buffers ()
  │     (cond ((memq major-mode '(undo-tree-visualizer-mode diff-mode)) nil)
  │ 	  ((string-match "Org Src" (buffer-name)) nil)
  │ 	  ((let ((pt (point)))
  │ 	     (and (string-match ".gpg" (buffer-name))
  │ 		  (not (eq pt 1))
  │ 		  (string-match (buffer-substring (- pt 1) pt) " "))) nil) ;; .gpg で半角スペースの後ろのブリッツでは自動保存しない．FIXME 半角スペース+行末
  │ 	  ((my-ox-hugo-auto-saving-p) nil)
  │ 	  (t
  │ 	   (auto-save-buffers))))
  │
  │   (run-with-idle-timer 1.6 t #'my-auto-save-buffers))
  │
  │ (unless noninteractive
  │   (global-auto-revert-mode 1)
  │   ;; revert されるのが org バッファのとき，自動的にドロワをたたむ
  │   ;; カーソルが (point-max) に移動してしまう場合は非推奨
  │   (with-eval-after-load "org"
  │     (defun my-org-hide-drawers-all ()
  │       (when (eq major-mode 'org-mode)
  │ 	(org-cycle-hide-drawers 'all)))
  │     (add-hook 'after-revert-hook 'my-org-hide-drawers-all)))
  └────


12 最近訪れたファイル対応
═════════════════════════

  ┌────
  │ ;; 最近訪れたファイル対応
  │ (defun recentf-base-name ()
  │   (host-base-name "recentf" ".dat"))
  │
  │ (defun recentf-file-name ()
  │   (expand-file-name (locate-user-emacs-file (recentf-base-name))))
  │
  │ (setq recentf-save-file (recentf-file-name))
  │
  │ (recentf-mode 1)
  │ (setq recentf-max-menu-items 25)
  │ (setq recentf-max-saved-items 25)
  │ (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  └────


13 ido
══════


14 オプション
═════════════

  現在の起動オプションでは読み込ませたくないので、一時的に除外する。これ
  は、emacs の起動引数の役割を私が理解していないためである。

  ┌────
  │ (defun options-base-name ()
  │   (sys-base-name "options-experimental" ".el"))
  │
  │ (defun options-file-name ()
  │   (expand-file-name (locate-user-emacs-file (options-base-name))))
  │
  │ (setq custom-file (options-file-name))
  │ (if (file-exists-p custom-file)
  │     (load custom-file t nil nil))
  └────


14.0.1 DONE 他のホストと、衝突する恐れがある
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  単純に導入しただけでは、Nextcloudで共有している他のホストと衝突してし
  まう。本来であれば、Nextcloudクライアント側でignore ファイルを共有して
  回避すべき問題である。ホスト名を付加して衝突回避できるか要検討。


15 拡張選択範囲
═══════════════

  ┌────
  │ ;; 拡張選択範囲
  │ (use-package expand-region
  │   :ensure t)
  │ (global-set-key (kbd "C-q") 'er/expand-region)
  └────


16 コード補完
═════════════

  ┌────
  │ ;; コード補完
  │ (use-package company
  │   :ensure t)
  └────


17 ミニバッファーの改善
═══════════════════════

  詳しい解説は次のビデオにある
  <https://www.youtube.com/watch?v=d3aaxOqwHhI>


17.1 vertico, marginalia
────────────────────────

  ┌────
  │ ;; ミニバッファーの改善
  │ ;; https://github.com/minad/vertico
  │ (use-package vertico
  │   :ensure t
  │   :config
  │   (setq vertico-cycle t)
  │   (setq vertico-resize nil)
  │   (vertico-mode 1))
  │
  │ ;; https://github.com/minad/marginalia
  │ (use-package marginalia
  │   :ensure t
  │   :config
  │   (marginalia-mode 1))
  │
  │ ;; https://github.com/minad/consult
  │ (use-package consult
  │   :ensure t)
  └────


17.2 consult
────────────

  ┌────
  │ ;; Example configuration for Consult
  │ (use-package consult
  │   ;; Replace bindings. Lazily loaded by `use-package'.
  │   :bind (;; C-c bindings in `mode-specific-map'
  │ 	 ("C-c M-x" . consult-mode-command)
  │ 	 ("C-c h" . consult-history)
  │ 	 ("C-c k" . consult-kmacro)
  │ 	 ("C-c m" . consult-man)
  │ 	 ("C-c i" . consult-info)
  │ 	 ([remap Info-search] . consult-info)
  │ 	 ;; C-x bindings in `ctl-x-map'
  │ 	 ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
  │ 	 ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
  │ 	 ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  │ 	 ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
  │ 	 ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
  │ 	 ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
  │ 	 ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
  │ 	 ;; Custom M-# bindings for fast register access
  │ 	 ("M-#" . consult-register-load)
  │ 	 ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  │ 	 ("C-M-#" . consult-register)
  │ 	 ;; Other custom bindings
  │ 	 ("M-y" . consult-yank-pop)                ;; orig. yank-pop
  │ 	 ;; M-g bindings in `goto-map'
  │ 	 ("M-g e" . consult-compile-error)
  │ 	 ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
  │ 	 ("M-g g" . consult-goto-line)             ;; orig. goto-line
  │ 	 ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
  │ 	 ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
  │ 	 ("M-g m" . consult-mark)
  │ 	 ("M-g k" . consult-global-mark)
  │ 	 ("M-g i" . consult-imenu)
  │ 	 ("M-g I" . consult-imenu-multi)
  │ 	 ;; M-s bindings in `search-map'
  │ 	 ("M-s d" . consult-find)                  ;; Alternative: consult-fd
  │ 	 ("M-s c" . consult-locate)
  │ 	 ("M-s g" . consult-grep)
  │ 	 ("M-s G" . consult-git-grep)
  │ 	 ("M-s r" . consult-ripgrep)
  │ 	 ("M-s l" . consult-line)
  │ 	 ("M-s L" . consult-line-multi)
  │ 	 ("M-s k" . consult-keep-lines)
  │ 	 ("M-s u" . consult-focus-lines)
  │ 	 ;; Isearch integration
  │ 	 ("M-s e" . consult-isearch-history)
  │ 	 :map isearch-mode-map
  │ 	 ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
  │ 	 ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
  │ 	 ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
  │ 	 ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
  │ 	 ;; Minibuffer history
  │ 	 :map minibuffer-local-map
  │ 	 ("M-s" . consult-history)                 ;; orig. next-matching-history-element
  │ 	 ("M-r" . consult-history))                ;; orig. previous-matching-history-element
  │
  │   ;; Enable automatic preview at point in the *Completions* buffer. This is
  │   ;; relevant when you use the default completion UI.
  │   :hook (completion-list-mode . consult-preview-at-point-mode)
  │
  │   ;; The :init configuration is always executed (Not lazy)
  │   :init
  │
  │   ;; Optionally configure the register formatting. This improves the register
  │   ;; preview for `consult-register', `consult-register-load',
  │   ;; `consult-register-store' and the Emacs built-ins.
  │   (setq register-preview-delay 0.5
  │ 	register-preview-function #'consult-register-format)
  │
  │   ;; Optionally tweak the register preview window.
  │   ;; This adds thin lines, sorting and hides the mode line of the window.
  │   (advice-add #'register-preview :override #'consult-register-window)
  │
  │   ;; Use Consult to select xref locations with preview
  │   (setq xref-show-xrefs-function #'consult-xref
  │ 	xref-show-definitions-function #'consult-xref)
  │
  │   ;; Configure other variables and modes in the :config section,
  │   ;; after lazily loading the package.
  │   :config
  │
  │   ;; Optionally configure preview. The default value
  │   ;; is 'any, such that any key triggers the preview.
  │   ;; (setq consult-preview-key 'any)
  │   ;; (setq consult-preview-key "M-.")
  │   ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  │   ;; For some commands and buffer sources it is useful to configure the
  │   ;; :preview-key on a per-command basis using the `consult-customize' macro.
  │   (consult-customize
  │    consult-theme :preview-key '(:debounce 0.2 any)
  │    consult-ripgrep consult-git-grep consult-grep
  │    consult-bookmark consult-recent-file consult-xref
  │    consult--source-bookmark consult--source-file-register
  │    consult--source-recent-file consult--source-project-recent-file
  │    ;; :preview-key "M-."
  │    :preview-key '(:debounce 0.4 any))
  │
  │   ;; Optionally configure the narrowing key.
  │   ;; Both < and C-+ work reasonably well.
  │   (setq consult-narrow-key "<") ;; "C-+"
  │
  │   ;; Optionally make narrowing help available in the minibuffer.
  │   ;; You may want to use `embark-prefix-help-command' or which-key instead.
  │   ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  │   )
  └────


17.3 embark
───────────

  ┌────
  │ ;; https://github.com/oantolin/embark/
  │ (use-package embark
  │   :ensure t
  │
  │   :bind
  │   (("C-." . embark-act)         ;; pick some comfortable binding
  │    ("C-;" . embark-dwim)        ;; good alternative: M-.
  │    ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  │
  │   :init
  │
  │   ;; Optionally replace the key help with a completing-read interface
  │   (setq prefix-help-command #'embark-prefix-help-command)
  │
  │   ;; Show the Embark target at point via Eldoc. You may adjust the
  │   ;; Eldoc strategy, if you want to see the documentation from
  │   ;; multiple providers. Beware that using this can be a little
  │   ;; jarring since the message shown in the minibuffer can be more
  │   ;; than one line, causing the modeline to move up and down:
  │
  │   ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  │   ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
  │
  │   :config
  │
  │   ;; Hide the mode line of the Embark live/completions buffers
  │   (add-to-list 'display-buffer-alist
  │ 	       '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
  │ 		 nil
  │ 		 (window-parameters (mode-line-format . none)))))
  │
  │ ;; Consult users will also want the embark-consult package.
  │ (use-package embark-consult
  │   :ensure t ; only need to install it, embark loads it after consult if found
  │   :hook
  │   (embark-collect-mode . consult-preview-at-point-mode))
  └────


18 Corf
═══════

  ┌────
  │ ;; https://github.com/minad/corfu
  │ (use-package corfu
  │   ;; Optional customizations
  │   ;; :custom
  │   ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  │   ;; (corfu-auto t)                 ;; Enable auto completion
  │   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  │   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  │   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  │   ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  │   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  │
  │   ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
  │   ;; :hook ((prog-mode . corfu-mode)
  │   ;;        (shell-mode . corfu-mode)
  │   ;;        (eshell-mode . corfu-mode))
  │
  │   ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  │   ;; be used globally (M-/).  See also the customization variable
  │   ;; `global-corfu-modes' to exclude certain modes.
  │   :init
  │   (global-corfu-mode))
  │
  │ ;; A few more useful configurations...
  │ (use-package emacs
  │   :custom
  │   ;; TAB cycle if there are only few candidates
  │   ;; (completion-cycle-threshold 3)
  │
  │   ;; Enable indentation+completion using the TAB key.
  │   ;; `completion-at-point' is often bound to M-TAB.
  │   (tab-always-indent 'complete)
  │
  │   ;; Emacs 30 and newer: Disable Ispell completion function.
  │   ;; Try `cape-dict' as an alternative.
  │   (text-mode-ispell-word-completion nil)
  │
  │   ;; Hide commands in M-x which do not apply to the current mode.  Corfu
  │   ;; commands are hidden, since they are not used via M-x. This setting is
  │   ;; useful beyond Corfu.
  │   (read-extended-command-predicate #'command-completion-default-include-p))
  └────


19 ディレクトリ表示の簡素化
═══════════════════════════

  <https://emacs.stackexchange.com/questions/27912/dired-sort-and-hide-by-default>
  ┌────
  │ ;; ディレクトリ表示の簡素化
  │ ;; https://emacs.stackexchange.com/questions/27912/dired-sort-and-hide-by-default
  │ (add-hook 'dired-mode-hook
  │ 	  (lambda ()
  │ 	    (dired-hide-details-mode 1)
  │ 	    (dired-sort-toggle-or-edit)))
  └────


20 Magit 設定
═════════════

  ┌────
  │ ;; Magit 設定
  │ (use-package magit
  │   :ensure t
  │   :pin melpa)
  │
  │ ;; https://joppot.info/posts/f3007a42-5ba2-4060-90d4-496697413cf9
  │ (use-package diff-hl
  │   :ensure t
  │   :init
  │   (global-diff-hl-mode)
  │   (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  │   (unless (window-system) (diff-hl-margin-mode))
  │   :custom-face
  │   (diff-hl-change ((t (:background "#8adf80"))))
  │   (diff-hl-delete ((t (:background "#ff8f88"))))
  │   (diff-hl-insert ((t (:background "#bfc9ff"))))
  │   :config
  │   (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  │   (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
  └────


21 Lisp ファミリ基本設定
════════════════════════

  ┌────
  │ ;; Lisp ファミリ基本設定
  │ (show-paren-mode t)
  │ (use-package paredit
  │   :ensure t
  │   :commands enable-paredit-mode
  │   :hook ((emacs-lisp-mode
  │ 	  org-mode)
  │ 	 . enable-paredit-mode))
  │
  │ (use-package smartparens :ensure t)
  │ (use-package rainbow-delimiters :ensure t)
  └────


21.1 emacs lisp
───────────────

  ┌────
  │ ;; emacs lisp
  │ (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  │ (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  │ ;; (add-hook 'emacs-lisp-mode-hook 'company-mode)
  │ ;; (add-hook 'emacs-lisp-mode-hook 'subword-mode)
  │ ;; (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode)
  │
  │ (eval-after-load 'inferior-emacs-lisp-mode
  │   '(progn
  │      (add-hook 'ielm-mode-hook 'paredit-mode)
  │      (define-key paredit-mode-map (kbd "RET") nil)
  │      (define-key paredit-mode-map (kbd "C-j") 'paredit-newline)))
  │
  └────


22 DONE 横に広がりすぎて編集しづらい。auto wrapp で単語境界で区切るのは日本語には合わない
═════════════════════════════════════════════════════════════════════════════════════════

  `C-x x t' `toggle-truncate-lines'でトグルできるのだが、継続行が先頭に
  来て見づらくなる。そこで次の記事を参考にしてみた。
  <https://zenn.dev/ebang/articles/231106_emacs-markdown>
  ┌────
  │ (use-package markdown-mode
  │   :mode ("\\.md\\'" . markdown-mode)
  │   :init
  │   (add-hook 'markdown-mode-hook #'turn-off-auto-fill)
  │   (add-hook 'markdown-mode-hook #'turn-on-visual-line-mode))
  │
  │ (unless (version< emacs-version "29.1")
  │   (use-package word-wrap-mode
  │     :hook (visual-line-mode . word-wrap-whitespace-mode)
  │     :config
  │     (add-to-list 'word-wrap-whitespace-characters ?\])))
  │
  │ ;; (use-package visual-fill-column
  │ ;;   :hook (visual-line-mode . visual-fill-column-mode)
  │ ;;   :init
  │ ;;   (setq visual-line-fringe-indicators '(left-curly-arrow nil))
  │ ;;   :config
  │ ;;   (setq visual-fill-column-width 120))
  │
  │ (use-package adaptive-wrap
  │   :hook (visual-line-mode . adaptive-wrap-prefix-mode))
  └────


23 Org
══════

23.1 近代化
───────────

  ┌────
  │ (use-package org-modern
  │   :ensure t
  │   :hook ((org-mode . org-modern-mode)))
  └────


23.2 `<s <tab>' でブロック文のテンプレートを挿入
────────────────────────────────────────────────

  ┌────
  │ ;; <s <tab> でブロック文のテンプレートを挿入
  │ (require 'org-tempo)
  └────


23.3 デフォルトのbabelではシェルは禁止されているの使えるようにする
──────────────────────────────────────────────────────────────────

  ┌────
  │ ;; デフォルトのbabelではシェルは禁止されているの使えるようにする
  │ (org-babel-do-load-languages
  │  'org-babel-load-languages
  │  '(
  │    (shell . t)
  │    (ruby . t)
  │    (python . t)
  │    ))
  └────


23.4 DONE 起動時に、自動で折りたたむ設定はどうだったっけ
────────────────────────────────────────────────────────

  参考: <https://takaxp.github.io/org-ja.html>
  ┌────
  │ #+STARTUP: content
  └────
  #+


23.5 `open-url-at-point' で開かれるブラウザの設定
─────────────────────────────────────────────────

  ┌────
  │ (setq browse-url-browser-function 'eww-browse-url)
  └────


24 お遊び
═════════

24.1 TODO ポモドーロタイマに使用する音源を物色中
────────────────────────────────────────────────

  Windows の検索パスは別途検討
  ┌────
  │ (let ((all-sounds
  │        (directory-files-recursively "/usr/share/sounds/sound-icons/" "\\.wav$" nil)))
  │   (dolist (snd all-sounds)
  │     (play-sound-file snd))
  │   all-sounds)
  └────

  ┌────
  │ (let ((all-sounds
  │        (directory-files-recursively "C:/Windows" "\\.wav$" nil)))
  │   ;; (dolist (snd all-sounds)
  │   ;;   (play-sound-file snd))
  │   all-sounds)
  └────

  • /usr/share/sounds/sound-icons/canary-long.wav
  • /usr/share/sounds/sound-icons/cembalo-1.wav
  • /usr/share/sounds/sound-icons/cembalo-10.wav
  • /usr/share/sounds/sound-icons/cembalo-11.wav
  • /usr/share/sounds/sound-icons/cembalo-12.wav
  • /usr/share/sounds/sound-icons/cembalo-2.wav
  • /usr/share/sounds/sound-icons/cembalo-3.wav
  • /usr/share/sounds/sound-icons/cembalo-6.wav
  • /usr/share/sounds/sound-icons/chord-7.wav
  • /usr/share/sounds/sound-icons/cockchafer-gentleman-1.wav
  • /usr/share/sounds/sound-icons/cymbaly-1.wav
  • /usr/share/sounds/sound-icons/electric-piano-3.wav
  • /usr/share/sounds/sound-icons/glass-water-1.wav
  • /usr/share/sounds/sound-icons/guitar-12.wav
  • /usr/share/sounds/sound-icons/guitar-13.wav
  • /usr/share/sounds/sound-icons/gummy-cat-2.wav
  • /usr/share/sounds/sound-icons/klavichord-4.wav
  • /usr/share/sounds/sound-icons/percussion-10.wav
  • /usr/share/sounds/sound-icons/percussion-12.wav
  • /usr/share/sounds/sound-icons/percussion-28.wav
  • /usr/share/sounds/sound-icons/percussion-50.wav
  • /usr/share/sounds/sound-icons/piano-3.wav
  • /usr/share/sounds/sound-icons/pipe.wav
  • /usr/share/sounds/sound-icons/pisk-down-cink.wav
  • /usr/share/sounds/sound-icons/pisk-down.wav
  • /usr/share/sounds/sound-icons/pisk-up-cink.wav
  • /usr/share/sounds/sound-icons/pisk-up.wav
  • /usr/share/sounds/sound-icons/prompt.wav
  • /usr/share/sounds/sound-icons/trumpet-1.wav
  • /usr/share/sounds/sound-icons/trumpet-12.wav
  • /usr/share/sounds/sound-icons/violoncello-7.wav
  • /usr/share/sounds/sound-icons/xylofon.wav


24.2 eww がローカルのファイルを開けるか
───────────────────────────────────────

  ┌────
  │ (eww-browse-url "file:///usr/local/share/GNUstep/Documentation/Developer/Base/ProgrammingManual/gs-base/index.html")
  └────


24.3 string-matchの実験
───────────────────────

  ┌────
  │ (string-match-p "\\.wav$"
  │ 		"/usr/share/sounds/sound-icons/canary-long.wav")
  │ (string-match-p "^file:///"
  │ 		"file:///usr/local/share/GNUstep/Documentation/Developer/Base/ProgrammingManual/gs-base/index.html")
  └────


25 ポモドーロタイマー
═════════════════════

  <https://systemcrafters.net/emacs-shorts/pomodoro-timer/>
  ┌────
  │ ;; https://systemcrafters.net/emacs-shorts/pomodoro-timer/
  │ (setq org-clock-sound "/usr/share/sounds/sound-icons/xylofon.wav")
  │ ;; C-c C-x ;
  │ (org-timer-set-timer 25)
  └────


26 キーストローク表示
═════════════════════

  ┌────
  │ ;; キーストローク表示
  │ ;; https://github.com/tarsius/keycast
  │ (use-package keycast
  │   :ensure t)
  └────


27 日本語フォントの設定
═══════════════════════

27.1 使用できるフォント名の確認
───────────────────────────────

  ┌────
  │ (seq-uniq (sort (font-family-list) 'string<) 'string=)
  └────


27.1.1 RESULTS(Haiku):
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  • Bitstream Charter
  • Cantarell
  • DejaVu Math TeX Gyre
  • DejaVu Sans
  • DejaVu Sans Mono
  • DejaVu Serif
  • Fira Mono
  • Fira Sans
  • Fira Sans Condensed
  • FontAwesome
  • Material Icons
  • Noto Sans
  • Noto Sans CJK JP
  • Noto Sans Display
  • Noto Sans Mono
  • Noto Sans Mono CJK JP
  • Noto Sans Symbols
  • Noto Sans Symbols 2
  • Noto Sans Thai
  • Noto Serif
  • Noto Serif Display
  • Noto Serif Thai
  • Source Code Pro
  • Source Sans Pro
  • Source Serif Pro
  • Ubuntu
  • Ubuntu Condensed
  • Ubuntu Mono
  • Weather Icons
  • all-the-icons
  • file-icons
  • github-octicons


27.1.2 RESULTS(Windows):
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  • Arial
  • Arial Black
  • BIZ UDPゴシック
  • BIZ UDP明朝 Medium
  • BIZ UDゴシック
  • BIZ UD明朝 Medium
  • Bahnschrift
  • Bahnschrift Condensed
  • Bahnschrift Light
  • Bahnschrift Light Condensed
  • Bahnschrift Light SemiCondensed
  • Bahnschrift SemiBold
  • Bahnschrift SemiBold Condensed
  • Bahnschrift SemiBold SemiConden
  • Bahnschrift SemiCondensed
  • Bahnschrift SemiLight
  • Bahnschrift SemiLight Condensed
  • Bahnschrift SemiLight SemiConde
  • Calibri
  • Calibri Light
  • Cambria
  • Cambria Math
  • Candara
  • Candara Light
  • Cantarell
  • Cascadia Code
  • Cascadia Code ExtraLight
  • Cascadia Code Light
  • Cascadia Code SemiBold
  • Cascadia Code SemiLight
  • Cascadia Mono
  • Cascadia Mono ExtraLight
  • Cascadia Mono Light
  • Cascadia Mono SemiBold
  • Cascadia Mono SemiLight
  • Comic Sans MS
  • Consolas
  • Constantia
  • Corbel
  • Corbel Light
  • Courier
  • Courier New
  • Ebrima
  • Fira Code
  • Fira Code Light
  • Fira Code Medium
  • Fira Code Retina
  • Fira Code SemiBold
  • FixedSys
  • FontAwesome
  • Franklin Gothic Medium
  • Gabriola
  • Gadugi
  • Georgia
  • HackGen
  • HackGen Console
  • HackGen Console NF
  • HackGen Console NFJ
  • HackGen35
  • HackGen35 Console
  • HackGen35 Console NF
  • HackGen35 Console NFJ
  • HoloLens MDL2 Assets
  • Impact
  • Ink Free
  • Iosevka NF
  • Iosevka NF ExtraBold
  • Iosevka NF ExtraBold Obl
  • Iosevka NF ExtraLight
  • Iosevka NF ExtraLight Obl
  • Iosevka NF Heavy
  • Iosevka NF Heavy Obl
  • Iosevka NF Light
  • Iosevka NF Light Obl
  • Iosevka NF Medium
  • Iosevka NF Medium Obl
  • Iosevka NF Obl
  • Iosevka NF SemiBold
  • Iosevka NF SemiBold Obl
  • Iosevka NF Thin
  • Iosevka NF Thin Obl
  • Iosevka NFM
  • Iosevka NFM ExtraBold
  • Iosevka NFM ExtraBold Obl
  • Iosevka NFM ExtraLight
  • Iosevka NFM ExtraLight Obl
  • Iosevka NFM Heavy
  • Iosevka NFM Heavy Obl
  • Iosevka NFM Light
  • Iosevka NFM Light Obl
  • Iosevka NFM Medium
  • Iosevka NFM Medium Obl
  • Iosevka NFM Obl
  • Iosevka NFM SemiBold
  • Iosevka NFM SemiBold Obl
  • Iosevka NFM Thin
  • Iosevka NFM Thin Obl
  • Iosevka NFP
  • Iosevka NFP ExtraBold
  • Iosevka NFP ExtraBold Obl
  • Iosevka NFP ExtraLight
  • Iosevka NFP ExtraLight Obl
  • Iosevka NFP Heavy
  • Iosevka NFP Heavy Obl
  • Iosevka NFP Light
  • Iosevka NFP Light Obl
  • Iosevka NFP Medium
  • Iosevka NFP Medium Obl
  • Iosevka NFP Obl
  • Iosevka NFP SemiBold
  • Iosevka NFP SemiBold Obl
  • Iosevka NFP Thin
  • Iosevka NFP Thin Obl
  • IosevkaTerm NF
  • IosevkaTerm NF ExtraBold
  • IosevkaTerm NF ExtraBold Obl
  • IosevkaTerm NF ExtraLight
  • IosevkaTerm NF ExtraLight Obl
  • IosevkaTerm NF Heavy
  • IosevkaTerm NF Heavy Obl
  • IosevkaTerm NF Light
  • IosevkaTerm NF Light Obl
  • IosevkaTerm NF Medium
  • IosevkaTerm NF Medium Obl
  • IosevkaTerm NF Obl
  • IosevkaTerm NF SemiBold
  • IosevkaTerm NF SemiBold Obl
  • IosevkaTerm NF Thin
  • IosevkaTerm NF Thin Obl
  • IosevkaTerm NFM
  • IosevkaTerm NFM ExtraBold
  • IosevkaTerm NFM ExtraBold Obl
  • IosevkaTerm NFM ExtraLight
  • IosevkaTerm NFM ExtraLight Obl
  • IosevkaTerm NFM Heavy
  • IosevkaTerm NFM Heavy Obl
  • IosevkaTerm NFM Light
  • IosevkaTerm NFM Light Obl
  • IosevkaTerm NFM Medium
  • IosevkaTerm NFM Medium Obl
  • IosevkaTerm NFM Obl
  • IosevkaTerm NFM SemiBold
  • IosevkaTerm NFM SemiBold Obl
  • IosevkaTerm NFM Thin
  • IosevkaTerm NFM Thin Obl
  • IosevkaTerm NFP
  • IosevkaTerm NFP ExtraBold
  • IosevkaTerm NFP ExtraBold Obl
  • IosevkaTerm NFP ExtraLight
  • IosevkaTerm NFP ExtraLight Obl
  • IosevkaTerm NFP Heavy
  • IosevkaTerm NFP Heavy Obl
  • IosevkaTerm NFP Light
  • IosevkaTerm NFP Light Obl
  • IosevkaTerm NFP Medium
  • IosevkaTerm NFP Medium Obl
  • IosevkaTerm NFP Obl
  • IosevkaTerm NFP SemiBold
  • IosevkaTerm NFP SemiBold Obl
  • IosevkaTerm NFP Thin
  • IosevkaTerm NFP Thin Obl
  • IosevkaTermSlab NF
  • IosevkaTermSlab NF ExtraBold
  • IosevkaTermSlab NF ExtraBold Ob
  • IosevkaTermSlab NF Light
  • IosevkaTermSlab NF Light Obl
  • IosevkaTermSlab NF Medium
  • IosevkaTermSlab NF Medium Obl
  • IosevkaTermSlab NF Obl
  • IosevkaTermSlab NFM
  • IosevkaTermSlab NFM ExtraBold
  • IosevkaTermSlab NFM ExtraBold O
  • IosevkaTermSlab NFM Light
  • IosevkaTermSlab NFM Light Obl
  • IosevkaTermSlab NFM Medium
  • IosevkaTermSlab NFM Medium Obl
  • IosevkaTermSlab NFM Obl
  • IosevkaTermSlab NFP
  • IosevkaTermSlab NFP ExtraBold
  • IosevkaTermSlab NFP ExtraBold O
  • IosevkaTermSlab NFP Light
  • IosevkaTermSlab NFP Light Obl
  • IosevkaTermSlab NFP Medium
  • IosevkaTermSlab NFP Medium Obl
  • IosevkaTermSlab NFP Obl
  • Javanese Text
  • Leelawadee UI
  • Leelawadee UI Semilight
  • Lucida Console
  • Lucida Sans Unicode
  • MS Sans Serif
  • MS Serif
  • MS UI Gothic
  • MV Boli
  • Malgun Gothic
  • Malgun Gothic Semilight
  • Marlett
  • Material Icons
  • Meiryo UI
  • Microsoft Himalaya
  • Microsoft JhengHei
  • Microsoft JhengHei Light
  • Microsoft JhengHei UI
  • Microsoft JhengHei UI Light
  • Microsoft New Tai Lue
  • Microsoft PhagsPa
  • Microsoft Sans Serif
  • Microsoft Tai Le
  • Microsoft YaHei
  • Microsoft YaHei Light
  • Microsoft YaHei UI
  • Microsoft YaHei UI Light
  • Microsoft Yi Baiti
  • MingLiU-ExtB
  • MingLiU_HKSCS-ExtB
  • Modern
  • Mongolian Baiti
  • Myanmar Text
  • NSimSun
  • Nirmala UI
  • Nirmala UI Semilight
  • Noto Sans CJK HK
  • Noto Sans CJK HK Black
  • Noto Sans CJK HK DemiLight
  • Noto Sans CJK HK Light
  • Noto Sans CJK HK Medium
  • Noto Sans CJK HK Thin
  • Noto Sans CJK JP
  • Noto Sans CJK JP Black
  • Noto Sans CJK JP DemiLight
  • Noto Sans CJK JP Light
  • Noto Sans CJK JP Medium
  • Noto Sans CJK JP Thin
  • Noto Sans CJK KR
  • Noto Sans CJK KR Black
  • Noto Sans CJK KR DemiLight
  • Noto Sans CJK KR Light
  • Noto Sans CJK KR Medium
  • Noto Sans CJK KR Thin
  • Noto Sans CJK SC
  • Noto Sans CJK SC Black
  • Noto Sans CJK SC DemiLight
  • Noto Sans CJK SC Light
  • Noto Sans CJK SC Medium
  • Noto Sans CJK SC Thin
  • Noto Sans CJK TC
  • Noto Sans CJK TC Black
  • Noto Sans CJK TC DemiLight
  • Noto Sans CJK TC Light
  • Noto Sans CJK TC Medium
  • Noto Sans CJK TC Thin
  • Noto Sans Mono CJK HK
  • Noto Sans Mono CJK JP
  • Noto Sans Mono CJK KR
  • Noto Sans Mono CJK SC
  • Noto Sans Mono CJK TC
  • Noto Serif CJK JP
  • Noto Serif CJK JP Black
  • Noto Serif CJK JP ExtraLight
  • Noto Serif CJK JP Light
  • Noto Serif CJK JP Medium
  • Noto Serif CJK JP SemiBold
  • Noto Serif CJK KR
  • Noto Serif CJK KR Black
  • Noto Serif CJK KR ExtraLight
  • Noto Serif CJK KR Light
  • Noto Serif CJK KR Medium
  • Noto Serif CJK KR SemiBold
  • Noto Serif CJK SC
  • Noto Serif CJK SC Black
  • Noto Serif CJK SC ExtraLight
  • Noto Serif CJK SC Light
  • Noto Serif CJK SC Medium
  • Noto Serif CJK SC SemiBold
  • Noto Serif CJK TC
  • Noto Serif CJK TC Black
  • Noto Serif CJK TC ExtraLight
  • Noto Serif CJK TC Light
  • Noto Serif CJK TC Medium
  • Noto Serif CJK TC SemiBold
  • PMingLiU-ExtB
  • Palatino Linotype
  • Roman
  • Sans Serif Collection
  • Script
  • Segoe Fluent Icons
  • Segoe MDL2 Assets
  • Segoe Print
  • Segoe Script
  • Segoe UI
  • Segoe UI Black
  • Segoe UI Emoji
  • Segoe UI Historic
  • Segoe UI Light
  • Segoe UI Semibold
  • Segoe UI Semilight
  • Segoe UI Symbol
  • Segoe UI Variable Display
  • Segoe UI Variable Display Light
  • Segoe UI Variable Display Semib
  • Segoe UI Variable Display Semil
  • Segoe UI Variable Small
  • Segoe UI Variable Small Light
  • Segoe UI Variable Small Semibol
  • Segoe UI Variable Small Semilig
  • Segoe UI Variable Text
  • Segoe UI Variable Text Light
  • Segoe UI Variable Text Semibold
  • Segoe UI Variable Text Semiligh
  • SimSun
  • SimSun-ExtB
  • SimSun-ExtG
  • Sitka Banner
  • Sitka Banner Semibold
  • Sitka Display
  • Sitka Display Semibold
  • Sitka Heading
  • Sitka Heading Semibold
  • Sitka Small
  • Sitka Small Semibold
  • Sitka Subheading
  • Sitka Subheading Semibold
  • Sitka Text
  • Sitka Text Semibold
  • Small Fonts
  • Sylfaen
  • Symbol
  • Symbols Nerd Font Mono
  • System
  • Tahoma
  • Terminal
  • Times New Roman
  • Trebuchet MS
  • UD デジタル 教科書体 N-B
  • UD デジタル 教科書体 N-R
  • UD デジタル 教科書体 NK-B
  • UD デジタル 教科書体 NK-R
  • UD デジタル 教科書体 NP-B
  • UD デジタル 教科書体 NP-R
  • Verdana
  • Weather Icons
  • Webdings
  • Wingdings
  • Yu Gothic UI
  • Yu Gothic UI Light
  • Yu Gothic UI Semibold
  • Yu Gothic UI Semilight
  • all-the-icons
  • file-icons
  • github-octicons
  • メイリオ
  • 游ゴシック
  • 游ゴシック Light
  • 游ゴシック Medium
  • 游明朝
  • 游明朝 Demibold
  • 游明朝 Light
  • ＭＳ ゴシック
  • ＭＳ 明朝
  • ＭＳ Ｐゴシック
  • ＭＳ Ｐ明朝


27.1.3 RESULTS(LINUX):
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  • Abyssinica SIL
  • Ani
  • AnjaliOldLipi
  • Bitstream Charter
  • C059
  • Cantarell
  • Century Schoolbook L
  • Chandas
  • Chilanka
  • Courier
  • Courier 10 Pitch
  • D050000L
  • DejaVu Sans
  • DejaVu Sans Mono
  • DejaVu Serif
  • Dhurjati
  • Dingbats
  • Droid Sans Fallback
  • Dyuthi
  • Fira Code
  • FontAwesome
  • FreeMono
  • FreeSans
  • FreeSerif
  • Gargi
  • Garuda
  • Gayathri
  • Gidugu
  • Gubbi
  • Gurajada
  • Iosevka
  • Jamrul
  • KacstArt
  • KacstBook
  • KacstDecorative
  • KacstDigital
  • KacstFarsi
  • KacstLetter
  • KacstNaskh
  • KacstOffice
  • KacstOne
  • KacstPen
  • KacstPoster
  • KacstQurn
  • KacstScreen
  • KacstTitle
  • KacstTitleL
  • Kalapi
  • Kalimati
  • Karumbi
  • Keraleeyam
  • Khmer OS
  • Khmer OS System
  • Kinnari
  • LKLUG
  • LakkiReddy
  • Laksaman
  • Latin Modern Math
  • Latin Modern Mono
  • Latin Modern Mono Caps
  • Latin Modern Mono Light
  • Latin Modern Mono Light Cond
  • Latin Modern Mono Prop
  • Latin Modern Mono Prop Light
  • Latin Modern Mono Slanted
  • Latin Modern Roman
  • Latin Modern Roman Caps
  • Latin Modern Roman Demi
  • Latin Modern Roman Dunhill
  • Latin Modern Roman Slanted
  • Latin Modern Roman Unslanted
  • Latin Modern Sans
  • Latin Modern Sans Demi Cond
  • Latin Modern Sans Quotation
  • Lato
  • Liberation Mono
  • Liberation Sans
  • Liberation Sans Narrow
  • Liberation Serif
  • Likhan
  • Lohit Assamese
  • Lohit Bengali
  • Lohit Devanagari
  • Lohit Gujarati
  • Lohit Gurmukhi
  • Lohit Kannada
  • Lohit Malayalam
  • Lohit Odia
  • Lohit Tamil
  • Lohit Tamil Classical
  • Lohit Telugu
  • Loma
  • Mallanna
  • Mandali
  • Manjari
  • Material Icons
  • Meera
  • Mitra
  • Mukti
  • NATS
  • NTR
  • Nakula
  • Navilu
  • Nimbus Mono L
  • Nimbus Mono PS
  • Nimbus Roman
  • Nimbus Roman No9 L
  • Nimbus Sans
  • Nimbus Sans L
  • Nimbus Sans Narrow
  • Norasi
  • Noto Color Emoji
  • Noto Mono
  • Noto Sans CJK HK
  • Noto Sans CJK JP
  • Noto Sans CJK KR
  • Noto Sans CJK SC
  • Noto Sans CJK TC
  • Noto Sans Mono
  • Noto Sans Mono CJK HK
  • Noto Sans Mono CJK JP
  • Noto Sans Mono CJK KR
  • Noto Sans Mono CJK SC
  • Noto Sans Mono CJK TC
  • Noto Serif CJK HK
  • Noto Serif CJK JP
  • Noto Serif CJK KR
  • Noto Serif CJK SC
  • Noto Serif CJK TC
  • OpenSymbol
  • P052
  • Padauk
  • Padauk Book
  • Pagul
  • Peddana
  • Phetsarath OT
  • Ponnala
  • Pothana2000
  • Potti Sreeramulu
  • Purisa
  • Rachana
  • RaghuMalayalamSans
  • Ramabhadra
  • Ramaraja
  • Rasa
  • RaviPrakash
  • Rekha
  • Saab
  • Sahadeva
  • Samanata
  • Samyak Devanagari
  • Samyak Gujarati
  • Samyak Malayalam
  • Samyak Tamil
  • Sarai
  • Sawasdee
  • Sree Krushnadevaraya
  • Standard Symbols L
  • Standard Symbols PS
  • Suranna
  • Suravaram
  • Suruma
  • Syamala Ramana
  • Symbols Nerd Font Mono
  • TeX Gyre Adventor
  • TeX Gyre Bonum
  • TeX Gyre Bonum Math
  • TeX Gyre Chorus
  • TeX Gyre Cursor
  • TeX Gyre DejaVu Math
  • TeX Gyre Heros
  • TeX Gyre Heros Cn
  • TeX Gyre Pagella
  • TeX Gyre Pagella Math
  • TeX Gyre Schola
  • TeX Gyre Schola Math
  • TeX Gyre Termes
  • TeX Gyre Termes Math
  • TenaliRamakrishna
  • Tibetan Machine Uni
  • Timmana
  • Tlwg Mono
  • Tlwg Typewriter
  • Tlwg Typist
  • Tlwg Typo
  • URW Bookman
  • URW Bookman L
  • URW Chancery L
  • URW Gothic
  • URW Gothic L
  • URW Palladio L
  • Ubuntu
  • Ubuntu Condensed
  • Ubuntu Mono
  • Umpush
  • Uroob
  • Utopia
  • Vemana2000
  • Waree
  • Weather Icons
  • Yrsa
  • Z003
  • aakar
  • all-the-icons
  • bitstream charter
  • clean
  • clearlyu
  • clearlyu alternate glyphs
  • clearlyu arabic
  • clearlyu arabic extra
  • clearlyu devanagari
  • clearlyu devangari extra
  • clearlyu ligature
  • clearlyu pua
  • courier 10 pitch
  • fangsong ti
  • file-icons
  • fixed
  • github-octicons
  • gothic
  • latin modern roman
  • latin modern sans
  • latin modern sansquotation
  • latin modern typewriter
  • latin modern typewriter variable width
  • mincho
  • mry_KacstQurn
  • newspaper
  • nil
  • open look cursor
  • open look glyph
  • ori1Uni
  • padmaa
  • padmaa-Bold.1.1
  • song ti
  • texgyreadventor
  • texgyrebonum
  • texgyrechorus
  • texgyrecursor
  • texgyreheros
  • texgyrepagella
  • texgyreschola
  • texgyretermes


27.2 日本語の範囲をNotoフォントに設定
─────────────────────────────────────

  ┌────
  │ ;; 日本語の範囲をNotoフォントに設定
  │ (when (display-graphic-p)
  │   (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Noto Serif CJK JP"))
  │   ;; (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Noto Sans CJK JP"))
  │   )
  └────


27.3 確認用テーブル
───────────────────

  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   this is a header 1                this is a header2
  ──────────────────────────────────────────────────────────
   これはヘッダー位置ですよーん漢字  揃っているみたいですね
   カタカナ                          カタカナ崩れませんか
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


27.4 Notoフォントのインストール
───────────────────────────────

27.4.1 Windows
╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  ┌────
  │ kenjiro@um560-win11 MINGW64 ~
  │ $ scoop bucket add nerd-fonts
  │ Checking repo... OK
  │ The nerd-fonts bucket was added successfully.
  │
  │ kenjiro@um560-win11 MINGW64 ~
  │ $ scoop search noto
  │ Results from local buckets...
  │
  │ Name                          Version  Source     Binaries
  │ ----                          -------  ------     --------
  │ Noto-CJK-Mega-OTC             20190603 nerd-fonts
  │ Noto-NF-Mono                  3.2.1    nerd-fonts
  │ Noto-NF-Propo                 3.2.1    nerd-fonts
  │ Noto-NF                       3.2.1    nerd-fonts
  │ Source-Han-Noto-CJK-Ultra-OTC 20190603 nerd-fonts
  │
  │
  │ kenjiro@um560-win11 MINGW64 ~
  │ $ scoop install Noto-CJK-Mega-OTC
  │ Updating Scoop...
  │ Updating Buckets...
  │ Scoop was updated successfully!
  │ Installing 'Noto-CJK-Mega-OTC' (20190603) [64bit] from 'nerd-fonts' bucket
  │ NotoCJK.ttc (272.5 MB) [======================================================================================] 100%
  │ Checking hash of NotoCJK.ttc ... ok.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\Noto-CJK-Mega-OTC\current => ~\scoop\apps\Noto-CJK-Mega-OTC\20190603
  │ 'Noto-CJK-Mega-OTC' (20190603) was installed successfully!
  │
  │ kenjiro@um560-win11 MINGW64 ~
  └────


27.5 Iosevkaフォントのインストール
──────────────────────────────────

  <https://github.com/be5invis/Iosevka>


27.5.1 Linux
╌╌╌╌╌╌╌╌╌╌╌╌

  ┌────
  │ mkdir -p ~/Downloads
  │ cd ~/Downloads
  │ curl -O https://sid.ethz.ch/debian/fonts-iosevka/fonts-iosevka_22.0.0%2Bds-1_all.deb
  │ sudo dpkg -i fonts-iosevka_22.0.0%2Bds-1_all.deb
  └────


27.5.2 Windows
╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  ┌────
  │ kenjiro@um560-win11 MINGW64 ~
  │ $ scoop search iosevka
  │ Results from local buckets...
  │
  │ Name                     Version Source     Binaries
  │ ----                     ------- ------     --------
  │ Iosevka-NF-Mono          3.2.1   nerd-fonts
  │ Iosevka-NF-Propo         3.2.1   nerd-fonts
  │ Iosevka-NF               3.2.1   nerd-fonts
  │ IosevkaTerm-NF-Mono      3.2.1   nerd-fonts
  │ IosevkaTerm-NF-Propo     3.2.1   nerd-fonts
  │ IosevkaTerm-NF           3.2.1   nerd-fonts
  │ IosevkaTermSlab-NF-Mono  3.2.1   nerd-fonts
  │ IosevkaTermSlab-NF-Propo 3.2.1   nerd-fonts
  │ IosevkaTermSlab-NF       3.2.1   nerd-fonts
  │
  │
  │ kenjiro@um560-win11 MINGW64 ~
  │ $ scoop install Iosevka-NF-Mono Iosevka-NF-Propo Iosevka-NF IosevkaTerm-NF-Mono IosevkaTerm-NF-Propo IosevkaTerm-NF IosevkaTermSlab-NF-Mono IosevkaTermSlab-NF-Propo IosevkaTermSlab-NF
  │ Installing 'Iosevka-NF-Mono' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ Iosevka.zip (324.0 MB) [======================================================================================] 100%
  │ Checking hash of Iosevka.zip ... ok.
  │ Extracting Iosevka.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\Iosevka-NF-Mono\current => ~\scoop\apps\Iosevka-NF-Mono\3.2.1
  │ 'Iosevka-NF-Mono' (3.2.1) was installed successfully!
  │ Installing 'Iosevka-NF-Propo' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ Iosevka.zip (324.0 MB) [======================================================================================] 100%
  │ Checking hash of Iosevka.zip ... ok.
  │ Extracting Iosevka.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\Iosevka-NF-Propo\current => ~\scoop\apps\Iosevka-NF-Propo\3.2.1
  │ 'Iosevka-NF-Propo' (3.2.1) was installed successfully!
  │ Installing 'Iosevka-NF' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ Iosevka.zip (324.0 MB) [======================================================================================] 100%
  │ Checking hash of Iosevka.zip ... ok.
  │ Extracting Iosevka.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\Iosevka-NF\current => ~\scoop\apps\Iosevka-NF\3.2.1
  │ 'Iosevka-NF' (3.2.1) was installed successfully!
  │ Installing 'IosevkaTerm-NF-Mono' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ IosevkaTerm.zip (324.1 MB) [==================================================================================] 100%
  │ Checking hash of IosevkaTerm.zip ... ok.
  │ Extracting IosevkaTerm.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\IosevkaTerm-NF-Mono\current => ~\scoop\apps\IosevkaTerm-NF-Mono\3.2.1
  │ 'IosevkaTerm-NF-Mono' (3.2.1) was installed successfully!
  │ Installing 'IosevkaTerm-NF-Propo' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ IosevkaTerm.zip (324.1 MB) [==================================================================================] 100%
  │ Checking hash of IosevkaTerm.zip ... ok.
  │ Extracting IosevkaTerm.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\IosevkaTerm-NF-Propo\current => ~\scoop\apps\IosevkaTerm-NF-Propo\3.2.1
  │ 'IosevkaTerm-NF-Propo' (3.2.1) was installed successfully!
  │ Installing 'IosevkaTerm-NF' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ IosevkaTerm.zip (324.1 MB) [==================================================================================] 100%
  │ Checking hash of IosevkaTerm.zip ... ok.
  │ Extracting IosevkaTerm.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\IosevkaTerm-NF\current => ~\scoop\apps\IosevkaTerm-NF\3.2.1
  │ 'IosevkaTerm-NF' (3.2.1) was installed successfully!
  │ Installing 'IosevkaTermSlab-NF-Mono' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ IosevkaTermSlab.zip (182.4 MB) [==============================================================================] 100%
  │ Checking hash of IosevkaTermSlab.zip ... ok.
  │ Extracting IosevkaTermSlab.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\IosevkaTermSlab-NF-Mono\current => ~\scoop\apps\IosevkaTermSlab-NF-Mono\3.2.1
  │ 'IosevkaTermSlab-NF-Mono' (3.2.1) was installed successfully!
  │ Installing 'IosevkaTermSlab-NF-Propo' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ IosevkaTermSlab.zip (182.4 MB) [==============================================================================] 100%
  │ Checking hash of IosevkaTermSlab.zip ... ok.
  │ Extracting IosevkaTermSlab.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\IosevkaTermSlab-NF-Propo\current => ~\scoop\apps\IosevkaTermSlab-NF-Propo\3.2.1
  │ 'IosevkaTermSlab-NF-Propo' (3.2.1) was installed successfully!
  │ Installing 'IosevkaTermSlab-NF' (3.2.1) [64bit] from 'nerd-fonts' bucket
  │ IosevkaTermSlab.zip (182.4 MB) [==============================================================================] 100%
  │ Checking hash of IosevkaTermSlab.zip ... ok.
  │ Extracting IosevkaTermSlab.zip ... done.
  │ Running installer script...done.
  │ Linking ~\scoop\apps\IosevkaTermSlab-NF\current => ~\scoop\apps\IosevkaTermSlab-NF\3.2.1
  │ 'IosevkaTermSlab-NF' (3.2.1) was installed successfully!
  └────


28 ewwのフォントが汚い件
════════════════════════

  ┌────
  │ M-x eww-toggle-fonts
  │ または
  │ F => Shift-f
  └────


29 Eglot導入
════════════

  lspサーバーとの比較のため導入してみる
  ┌────
  │ (use-package eglot
  │   :ensure t
  │   :hook
  │   (c-mode . eglot-ensure)
  │   (c++-mode . eglot-ensure)
  │   (objc-mode . eglot-ensure)
  │   :config
  │   (add-to-list 'eglot-server-programs '((c-mode c++-mode objc-mode) "clangd")))
  └────


30 Tree sitter
══════════════

  ┌────
  │ ;; 構文解析エンジン Tree sitter
  │ (unless (version< emacs-version "29.0")
  │   (use-package treesit-auto
  │     :ensure t
  │     :config
  │     (setq treesit-auto-install t)
  │     (global-treesit-auto-mode)))
  └────


31 フレームの回転
═════════════════

  ┌────
  │ ;; フレームの回転
  │ (use-package transpose-frame
  │   :ensure t)
  └────


32 ウィンドウのリサイズ
═══════════════════════

  ┌────
  │ ;; C-s <araow keys> でウィンドウのサイズをマウスを使わずに調節する
  │ ;;
  │ ;; Window Resize
  │ ;; https://www.emacswiki.org/emacs/WindowResize
  │ ;;
  │ (defun win-resize-top-or-bot ()
  │   "Figure out if the current window is on top, bottom or in the
  │ middle"
  │   (let* ((win-edges (window-edges))
  │ 	 (this-window-y-min (nth 1 win-edges))
  │ 	 (this-window-y-max (nth 3 win-edges))
  │ 	 (fr-height (frame-height)))
  │     (cond
  │      ((eq 0 this-window-y-min) "top")
  │      ((eq (- fr-height 1) this-window-y-max) "bot")
  │      (t "mid"))))
  │
  │ (defun win-resize-left-or-right ()
  │   "Figure out if the current window is to the left, right or in the
  │ middle"
  │   (let* ((win-edges (window-edges))
  │ 	 (this-window-x-min (nth 0 win-edges))
  │ 	 (this-window-x-max (nth 2 win-edges))
  │ 	 (fr-width (frame-width)))
  │     (cond
  │      ((eq 0 this-window-x-min) "left")
  │      ((eq (+ fr-width 4) this-window-x-max) "right")
  │      (t "mid"))))
  │
  │ (defun win-resize-enlarge-horiz ()
  │   (interactive)
  │   (cond
  │    ((equal "top" (win-resize-top-or-bot)) (enlarge-window -1))
  │    ((equal "bot" (win-resize-top-or-bot)) (enlarge-window 1))
  │    ((equal "mid" (win-resize-top-or-bot)) (enlarge-window -1))
  │    (t (message "nil"))))
  │
  │ (defun win-resize-minimize-horiz ()
  │   (interactive)
  │   (cond
  │    ((equal "top" (win-resize-top-or-bot)) (enlarge-window 1))
  │    ((equal "bot" (win-resize-top-or-bot)) (enlarge-window -1))
  │    ((equal "mid" (win-resize-top-or-bot)) (enlarge-window 1))
  │    (t (message "nil"))))
  │
  │ (defun win-resize-enlarge-vert ()
  │   (interactive)
  │   (cond
  │    ((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
  │    ((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
  │    ((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally -1))))
  │
  │ (defun win-resize-minimize-vert ()
  │   (interactive)
  │   (cond
  │    ((equal "left" (win-resize-left-or-right)) (enlarge-window-horizontally 1))
  │    ((equal "right" (win-resize-left-or-right)) (enlarge-window-horizontally -1))
  │    ((equal "mid" (win-resize-left-or-right)) (enlarge-window-horizontally 1))))
  │
  │ ;; replace all C-M-(down|up|left|right) to
  │ ;;             C-s-(down|up|left|right)
  │ ;; reason for confilict to paredit
  │ (global-set-key [C-s-down] 'win-resize-minimize-vert)
  │ (global-set-key [C-s-up] 'win-resize-enlarge-vert)
  │ (global-set-key [C-s-left] 'win-resize-minimize-horiz)
  │ (global-set-key [C-s-right] 'win-resize-enlarge-horiz)
  │ (global-set-key [C-s-up] 'win-resize-enlarge-horiz)
  │ (global-set-key [C-s-down] 'win-resize-minimize-horiz)
  │ (global-set-key [C-s-left] 'win-resize-enlarge-vert)
  │ (global-set-key [C-s-right] 'win-resize-minimize-vert)
  └────


33 sudo編集
═══════════

  ┌────
  │ (use-package sudo-edit
  │   :ensure t
  │   :pin melpa)
  └────


34 Which Key
════════════

  [which-key] is a useful UI panel that appears when you start pressing
  any key binding in Emacs to offer you all possible completions for the
  prefix.  For example, if you press `C-c' (hold control and press the
  letter `c'), a panel will appear at the bottom of the frame displaying
  all of the bindings under that prefix and which command they run.
  This is very useful for learning the possible key bindings in the mode
  of your current buffer.
  ┌────
  │ (use-package which-key
  │   :defer 0
  │   :diminish which-key-mode
  │   :config
  │   (which-key-mode)
  │   (setq which-key-idle-delay 1))
  └────


[which-key] <https://github.com/justbur/emacs-which-key>


35 アイコン装飾
═══════════════

  ┌────
  │ (use-package all-the-icons
  │   :if (display-graphic-p))
  │
  │ (when (display-graphic-p)
  │   (use-package nerd-icons)
  │   (unless (kf:font-family-installed-p "all-the-icons")
  │     (all-the-icons-install-fonts))
  │   (unless (kf:font-family-installed-p "symbols nerd")
  │     (nerd-icons-install-fonts)))
  │
  │ (use-package all-the-icons-dired
  │   :if (display-graphic-p)
  │   :hook (dired-mode . all-the-icons-dired-mode))
  └────


36 astyle
═════════

  ┌────
  │ (use-package astyle
  │   :ensure t
  │   :when (executable-find "astyle"))
  └────


37 CMake 対応
═════════════

  ┌────
  │ (use-package cmake-mode
  │   :ensure t)
  │ (setq auto-mode-alist
  │       (append
  │        '(("CMakeLists\\.txt\\'" . cmake-mode))
  │        '(("\\.cmake\\'" . cmake-mode))
  │        auto-mode-alist))
  └────


38 末尾のゴミを可視化
═════════════════════

  ┌────
  │ ;; https://qiita.com/tadsan/items/df73c711f921708facdc
  │ (setq-default show-trailing-whitespace t)
  │ (defun my/disable-trailing-mode-hook ()
  │   "Disable show tail whitespace."
  │   (setq show-trailing-whitespace nil))
  │
  │ (defvar my/disable-trailing-modes
  │   '(comint-mode
  │     eshell-mode
  │     eww-mode
  │     term-mode
  │     vterm-mode
  │     slime-repl-mode
  │     compilation-mode
  │     twittering-mode))
  │
  │ (mapc
  │  (lambda (mode)
  │    (add-hook (intern (concat (symbol-name mode) "-hook"))
  │ 	     'my/disable-trailing-mode-hook))
  │  my/disable-trailing-modes)
  └────


39 モードラインをシンプル化
═══════════════════════════

  ┌────
  │ (use-package doom-modeline
  │   :if (and (display-graphic-p) (not (eq system-type 'haiku)))
  │   :init
  │   (doom-modeline-mode +1))
  └────


40 Iosevkaを標準フォントに
══════════════════════════

  ┌────
  │ ;; TODO この対策は一時的なものであるため、通常のoptionsに戻すのを忘れないこと
  │ (when (and (display-graphic-p) (kf:font-family-installed-p "iosevka"))
  │   (let ((font-height (if (< (display-pixel-height) 900) 100 130))
  │ 	(custom-set-faces
  │ 	 ;; custom-set-faces was added by Custom.
  │ 	 ;; If you edit it by hand, you could mess it up, so be careful.
  │ 	 ;; Your init file should contain only one such instance.
  │ 	 ;; If there is more than one, they won't work right.
  │ 	 ;;
  │ 	 '(default ((t (:family "Iosevka" :foundry "UKWN" :slant normal :weight regular :height font-height :width normal))))
  │ 	 ))))
  └────


41 デスクトップのサイズを記憶
═════════════════════════════

  ┌────
  │ ;; デスクトップ環境の保存
  │ ;; https://www.gnu.org/software/emacs//manual/html_node/emacs/Saving-Emacs-Sessions.html
  │ (desktop-save-mode (if (display-graphic-p) +1 -1))
  │ ;; ホスト名を付加してファイル名衝突回避
  │ (setq desktop-base-file-name (concat "." (safe-host-name-string) "-emacs.desktop"))
  └────

  ┌────
  │ desktop-path
  │ desktop-base-file-name
  │ (safe-host-name-string)
  └────


42 グローバル高速検索
═════════════════════

  ┌────
  │ ;; https://agel.readthedocs.io/en/latest/index.html
  │ (use-package ag
  │   :ensure t)
  └────


43 TODO 垂直分割より水分平割を優先する(表現が逆かな)
════════════════════════════════════════════════════

  一時的にオフにしておく、frame が縦長か横長かの判定で切り分ける
  frame-geometry関数のouter-sizeで判定すること
  ┌────
  │ ;; https://qiita.com/nobuyuki86/items/6b7aa2f17faa63b6a900#%E6%B0%B4%E5%B9%B3%E5%88%86%E5%89%B2%E3%82%88%E3%82%8A%E5%9E%82%E7%9B%B4%E5%88%86%E5%89%B2%E3%82%92%E5%84%AA%E5%85%88%E3%81%99%E3%82%8B
  │ (setq split-height-threshold nil)
  │ (setq split-width-threshold 0)
  └────


44 TODO 導入予定
════════════════

44.1 TODO narrow時にツリー間の移動を用意にし、プレゼンテーションも行える
────────────────────────────────────────────────────────────────────────

  <https://protesilaos.com/emacs/logos>


44.2 TODO モードラインに IME 情報が載せられないか?
──────────────────────────────────────────────────


45 Projectile
═════════════

  ┌────
  │ (use-package projectile
  │   :config
  │   (defun projectile-project-find-function (dir)
  │     (let* ((root (projectile-project-root dir)))
  │       (and root (cons 'transient root))))
  │   (with-eval-after-load 'project
  │     (add-to-list 'project-find-functions 'projectile-project-find-function))
  │   )
  │
  │ ;; (use-package eglot
  │ ;;   :bind (:map eglot-mode-map
  │ ;;               ("C-c C-d" . eglot-help-at-point)
  │ ;;               ("C-c C-r" . eglot-code-actions))
  │ ;;   :hook
  │ ;;   ((c-mode-common . eglot-ensure))
  │ ;;   )
  └────


46 ObjC
═══════

  ┌────
  │ (defun kf:c-mode-init ()
  │   (c-toggle-auto-newline 1)
  │   (setq c-hanging-braces-alist '((statement-open before after)
  │ 				 (substatement-open before after) ))
  │   )
  │ (defun kf:objc-mode-init ()
  │   (c-toggle-auto-newline 1)
  │   (setq c-hanging-braces-alist '((statement before after)
  │ 				 (statement-open before after)
  │ 				 (substatement-open before after) ))
  │   )
  │ (add-hook 'c-mode-hook 'kf:c-mode-init)
  │ (add-hook 'objc-mode-hook 'kf:objc-mode-init)
  │
  │ ;; https://qiita.com/fujimisakari/items/a6ff082f0e8eddc09511
  │ ;; .hファイルもobjc-modeで開くけるようにする
  │ (add-to-list 'magic-mode-alist
  │ 	     `(,(lambda ()
  │ 		  (and (string= (file-name-extension buffer-file-name) "h")
  │ 		       (re-search-forward "@\\<interface\\>"
  │ 					  magic-mode-regexp-match-limit t)))
  │ 	       . objc-mode))
  └────


47 ClangFormat
══════════════

  ┌────
  │ (use-package clang-format
  │   :ensure t)
  └────


48 GNUstep Renaissance
══════════════════════

  ┌────
  │ (add-to-list 'auto-mode-alist '("\\.gsmarkup$" . xml-mode))
  └────


49 NeoTree
══════════

  ┌────
  │ ;; NeoTree
  │ ;; https://tsuu32.hatenablog.com/entry/2020/08/19/004306
  │ (use-package neotree
  │   :ensure t
  │   :config
  │   (setq neo-show-hidden-files t) ; dot-fileも表示する
  │   (setq neo-theme 'icons) )
  └────


50 Orderless
════════════

  ┌────
  │ (use-package orderless
  │   :ensure t
  │   :custom
  │   (completion-styles '(orderless basic))
  │   (completion-category-overrides '((file (styles basic partial-completion)))))
  └────


51 Mozc
═══════

  ┌────
  │ ;; sudo apt install -y emacs-mozc emacs-mozc-bin
  │ ;; 現在、 cl deprecated で起動エラーが出るため、OFFにしておく
  │ (when (kf:ensure-load-file "/usr/share/emacs/site-lisp/emacs-mozc/mozc.el")
  │   (setq default-input-method "japanese-mozc"))
  │
  └────

  ジャパニーズもずく打てますかね？入力の感触は良いが、インライン変換でき
  るのは気持ちが良い。


52 Haiku Support
════════════════

52.1 Setup Jamfile mode
───────────────────────

  ┌────
  │ ;; Haiku build system
  │ (kf:ensure-load-file "~/.emacs.d/lisp/jam-mode.el")
  │
  └────


52.2 Haiku Format
─────────────────


53 マルチプルカーソル
═════════════════════

  • <https://emacsrocks.com/e13.html>
  • <https://github.com/magnars/multiple-cursors.el>
  ┌────
  │ (use-package multiple-cursors
  │   :ensure t)
  │
  │ (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  │ (global-set-key (kbd "C->")         'mc/mark-next-like-this)
  │ (global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
  │ (global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this)
  │ (global-set-key (kbd "C-\"")        'mc/skip-to-next-like-this)
  │ (global-set-key (kbd "C-:")         'mc/skip-to-previous-like-this)
  └────


54 Transclude
═════════════

  ┌────
  │ (use-package org-transclusion
  │   :ensure t
  │   :after org)
  │ (define-key global-map (kbd "C-c <f12>") #'org-transclusion-add)
  │ (define-key global-map (kbd "C-c t") #'org-transclusion-mode)
  └────


55 定型文の挿入
═══════════════

  ┌────
  │ (use-package yasnippet)
  │ (use-package yasnippet-snippets)
  └────


56 Common Lisp環境
══════════════════

  ┌────
  │ ;; https://github.com/roswell/roswell
  │ ;; (kf:ensure-load-file "~/.roswell/helper.el")
  │ (use-package slime
  │   :if (file-exists-p (expand-file-name "~/.roswell/helper.el"))
  │   :ensure slime-company
  │   :init (load (expand-file-name "~/.roswell/helper.el"))
  │   :custom (inferior-lisp-program "ros -Q run ")
  │   :config (slime-setup '(slime-fancy slime-company)))
  │
  │ (defun my-slime-sync-repl ()
  │   "現在のバッファのパッケージに移動してからREPLに移行"
  │   (slime-sync-package-and-default-directory)
  │   (slime-switch-to-output-buffer))
  │
  │ (global-set-key (kbd "C-c C-f") 'slime-sync-package-and-default-directory)
  │
  └────


57 Free Basic
═════════════

  ┌────
  │ ;; https://github.com/rversteegen/fb-mode
  │ (kf:ensure-load-file "~/.emacs.d/lisp/fb-mode.el")
  │
  └────


58 D lang
═════════

  ┌────
  │ (use-package d-mode
  │   :ensure t)
  └────


59 TODO Compile command
═══════════════════════

  カレントバッファに対するコンパイルコマンド
  <https://www.reddit.com/r/emacs/comments/17ucbww/passing_current_file_name_to_compile_command/>

  ┌────
  │ (add-hook 'c-mode-hook
  │ 	  (lambda ()
  │ 	    (set (make-local-variable 'compile-command)
  │ 		 (format "gcc -g %s -o %s" (file-name-nondirectory buffer-file-name) (file-name-sans-extension (file-name-nondirectory buffer-file-name))))))
  └────


60 末尾
═══════

  ┌────
  │ (recentf-open-files)
  └────
