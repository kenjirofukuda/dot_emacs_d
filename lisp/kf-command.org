#+TITLE: カスタムコマンド
#+PROPERTY: tangle ~/.emacs.d/lisp/kf-command.el

* このファイルの使用方法
#+BEGIN_SRC shell :tangle no
  alias emacs2='emacs -Q -l ~/.emacs.d/experminal-init.el'
  # then use: emacs2 <Enter>
#+END_SRC

* ファイルの生成方法
#+BEGIN_SRC :tangle no
;; org-babel-tangle
C-c C-v C-t
#+END_SRC

* 式の評価結果を出力する
#+BEGIN_SRC :tangle no
;; org-babel-execute-maybe
C-c C-v C-e
C-c C-c ;; が簡単かも
#+END_SRC

* フォントがインストールされているかを調べる
#+begin_src elisp :tangle yes
  (defun kf:font-family-installed-p (fontname)
    ;; フォントがインストールされているかを調べる
    (seq-some (lambda (elt)
                (string-prefix-p fontname (downcase elt)))
              (font-family-list)))
#+end_src

** 例
#+begin_src elisp
  (kf:font-family-installed-p "iosevka")
  (kf:font-family-installed-p "noto serif cjk")
#+end_src

* シェルコマンドの挿入
#+BEGIN_SRC elisp :tangle yes
  ;; シェルコマンドの結果を挿入
  (defun kf:insert-shell-command (start end command)
    "シェルコマンドの結果を挿入"
    (interactive (let (string)
		   (setq string (read-shell-command "Shell command on region(and insert): "))
		   (list (point) (point) string)))
    (let ((output-buffer t)
	  (replace t))
      (shell-command-on-region start end command output-buffer replace)))

#+END_SRC

* VTERM
#+begin_src elisp :tangle yes
  (defun kf:vterm-cd (dir)
    (with-current-buffer "*vterm*"
      (vterm-send-string (concat "cd " dir))
      (vterm-send-return)))

  (defun kf:vterm-visit (dir)
    (kf:vterm-cd dir)
    (switch-to-buffer-other-window "*vterm*"))

  (defun kf:vterm-quit ()
    (with-current-buffer "*vterm*"
      (vterm-send-C-d)))
#+end_src


* カーソル行のファイルを開く

#+begin_src
C-c <f3>
#+end_src

#+BEGIN_SRC elisp :tangle yes
  (defun kf:open-file-thing ()
    "カーソル行のファイルを開く"
    (interactive)
    (let ((filename (thing-at-point 'filename t))
          (url (thing-at-point 'url t)))
      (when url
        (cond ((string-match-p "^file:///" url)
               (eww-browse-url url)
               (message "eww: %s" url))
              (t (message "chrome: %s" url)
                 (browse-url-chrome url))))
      (when (and filename (file-exists-p filename))
        (cond ((string-match-p "\\.wav$" filename)
               (play-sound-file filename))
              (t
               (find-file-other-window filename))))))
  (global-set-key (kbd "\C-c <f3>") 'kf:open-file-thing)

#+END_SRC


#+begin_src elisp :tangle yes
  (defun kf:ensure-load-file (file)
    "ファイルが存在すればロードする"
    (let ((full-path (expand-file-name file)))
      (when (file-exists-p full-path)
        (load-file full-path))))

#+end_src

** 以下のパス名で確認
以下の文字列上にカーソルを移動し、=C-c <f3>= を実行し、開けるか確認すること
- https://systemcrafters.net/emacs-shorts/pomodoro-timer/
- file:///usr/local/share/GNUstep/Documentation/Developer/Base/ProgrammingManual/gs-base/index.html
- /usr/share/sounds/sound-icons/canary-long.wav
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsInform.m

* ウィンドウのバッファを固定する
#+begin_src elisp :tangle yes
  ;; ウィンドウのバッファを固定する
  ;; Similar to: http://stackoverflow.com/questions/43765/pin-emacs-buffers-to-windows-for-cscope/65992#65992

  (defun kf:pin-buffer ()
    "Pin buffer to current window."
    (interactive)
    (message
     (if (let (window (get-buffer-window (current-buffer)))
           (set-window-dedicated-p window (not (window-dedicated-p window))))
         "pinned buffer" "un-pinned buffer")))
#+end_src

* ファイルが適切なソースコードか?
#+begin_src elisp :tangle yes
  ;; ファイルが適切なソースコードか?
  (defun kf:valid-project-file (path)
    "ファイルが適切なソースコードか?"
    (not (or (string-match-p ".*/\\.ccls-cache/.*" path)
	     (string-match-p ".*/\\.git/.*" path))))
#+end_src

* 試し
#+begin_src bash :results both
  echo "hage"
#+end_src

#+RESULTS:
: hage

#+begin_src elisp :results both
  (+ 1 2)
#+end_src

#+RESULTS:
: 3

** 利用可能な shell 名
#+begin_src elisp :results both
  org-babel-shell-names
#+end_src

#+RESULTS:
| sh | bash | zsh | fish | csh | ash | dash | ksh | mksh | posh |


** 具体例
プロジェクトディレクトリの中で、望まないファイルの除外を行う
#+begin_src elisp :results list
(directory-files-recursively
   "~/Documents/github/kenjirofukuda/gdsfeel-gnustep/" "\\.[mhc]$"
   nil
   'kf:valid-project-file)
#+end_src

#+RESULTS:
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsArchiver.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsArchiver.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsElement.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsElement.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsLayer.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsLayer.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsLibrary.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsLibrary.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsStructure.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsStructure.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsViewport.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/GdsViewport.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/NSArray+Elements.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/NSArray+Elements.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/NSArray+Points.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/NSArray+Points.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelCore/osxportability.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsFeelTool/source.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/AppDelegate.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/AppDelegate.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsElementDrawer.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsElementDrawer.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsLibraryDocument.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsLibraryDocument.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsStructureView.h
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/GdsStructureView.m
- ~/Documents/github/kenjirofukuda/gdsfeel-gnustep/main.m

* フッタ
#+BEGIN_SRC elisp :tangle yes
  (message "kf-command loaded...")
  (provide 'kf-command)
#+END_SRC
