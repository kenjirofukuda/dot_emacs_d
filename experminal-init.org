#+TITLE: Experminal init.el
#+PROPERTY: tangle "~/.emacs.d/experminal-init.el"
#+STARTUP: content

* 参考
- [[https://ayatakesi.github.io/emacs/29.4/html/index.html][Emacs Japanese]]
- https://takaxp.github.io/org-ja.html
- [[https://www.gnu.org/software/emacs/manual/html_node/eintr/][An Introduction to Programing in Emacs Lisp]]
- [[https://www.google.com/]]
- file:///usr/local/share/GNUstep/Documentation/Developer/Base/ProgrammingManual/gs-base/index.html
- file:///usr/local/share/GNUstep/Documentation/Developer/Base/Reference/Base.html

* このファイルの使用方法
#+BEGIN_SRC shell :tangle no
  alias emacs2='emacs -Q -l ~/.emacs.d/experminal-init.el'
  # then use: emacs2 <Enter>
#+END_SRC

* ファイルの生成方法
#+BEGIN_SRC :tangle no
C-c C-v C-t
#+END_SRC

* Script Runner

これはブラウザの拡張機能であり、以下のソースを GNU Manuals というタイトルのもとに貼り付けて利用すれば、おかしな翻訳を避けることができる。
** TODO あれ、javascript で C-M-\ =indent-region= すると、4space のインデントになってしまう。どこかで見直そう。

#+begin_src javascript
  const classes = [
      "example",
      "category-def",
      "def-name",
      "def-var-arguments"
  ]

  const qclasses = classes.map((v) => "." + v).join(",")

  document.querySelectorAll(qclasses).forEach((el) => {
      if (!el.hasAttribute("translate")) {
          el.setAttribute("translate", "no");
      }
  });
#+end_src

* スタートアップメッセージ
#+BEGIN_SRC elisp :tangle yes
  ;;;

  ;;; Code:

  (with-current-buffer "*scratch*"
    (insert ";;; loading Experminal init.el\n\n"))

  (when (file-directory-p "~/.emacs.d/lisp")
    (push (expand-file-name "~/.emacs.d/lisp") load-path))

  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 8 1024 1024)) ;; 8mb
#+END_SRC

* パッケージ自動アップデート
#+BEGIN_SRC elisp :tangle yes
  ;; パッケージアーカイブ
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (eval-and-compile
    (require 'package)
    (customize-set-variable
     'package-archives '(("org" . "https://orgmode.org/elpa/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("melpa-stable" . "https://mstable.elpa.org/packages/")
			 ("gnu" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t))

  ;; パッケージ自動アップデート
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "20:00"))
#+END_SRC

* EditorConfig
#+begin_src elisp :tangle yes
  ;; Editor Config
  ;; https://editorconfig.org/
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
* より本物に近いターミナルエミュレータ
https://github.com/akermu/emacs-libvterm
** 前提条件
Cライブラリをコンパイルして利用するため、コンパイル環境を準備
*** Debian 系列
#+begin_src sh
  sudo apt install libtool
  sudo apt install libtool-bin
#+end_src
** パッケージ導入
#+begin_src elisp :tangle yes
  ;; より本物に近いターミナルエミュレータ
  (use-package vterm
    :ensure t)
#+end_src
* 基本関数
#+BEGIN_SRC elisp :tangle yes
  ;; 基本関数
  (defun replace-in-string (what with in)
    (replace-regexp-in-string (regexp-quote what) with in nil 'literal))

  (defun safe-system-type-string ()
    (replace-in-string "/" "_" (prin1-to-string system-type)))

  (defun safe-host-name-string ()
    (replace-in-string "/" "_" (downcase (system-name))))

  (defun sys-base-name (prefix suffix)
    (concat prefix "-" (safe-system-type-string) suffix ))

  (defun host-base-name (prefix suffix)
    (concat prefix "-" (safe-host-name-string) suffix ))
#+END_SRC

* 外部プロセス更新ファイルのバッファ同期
#+BEGIN_SRC elisp :tangle yes
  ;; 外部プロセス更新ファイルのバッファ同期
  ;; https://takaxp.github.io/init.html#orgc2257142
  (when (require 'auto-save-buffers nil t)

    (defun my-ox-hugo-auto-saving-p ()
      (when (eq major-mode 'org-mode)
	(or (bound-and-true-p org-capture-mode) ;; when activating org-capture
	    (and (fboundp 'org-entry-get)
		 (equal "" (org-entry-get (point) "EXPORT_FILE_NAME"))))))

    (defun my-auto-save-buffers ()
      (cond ((memq major-mode '(undo-tree-visualizer-mode diff-mode)) nil)
	    ((string-match "Org Src" (buffer-name)) nil)
	    ((let ((pt (point)))
	       (and (string-match ".gpg" (buffer-name))
		    (not (eq pt 1))
		    (string-match (buffer-substring (- pt 1) pt) " "))) nil) ;; .gpg で半角スペースの後ろのブリッツでは自動保存しない．FIXME 半角スペース+行末
	    ((my-ox-hugo-auto-saving-p) nil)
	    (t
	     (auto-save-buffers))))

    (run-with-idle-timer 1.6 t #'my-auto-save-buffers))

  (unless noninteractive
    (global-auto-revert-mode 1)
    ;; revert されるのが org バッファのとき，自動的にドロワをたたむ
    ;; カーソルが (point-max) に移動してしまう場合は非推奨
    (with-eval-after-load "org"
      (defun my-org-hide-drawers-all ()
	(when (eq major-mode 'org-mode)
	  (org-cycle-hide-drawers 'all)))
      (add-hook 'after-revert-hook 'my-org-hide-drawers-all)))
#+END_SRC

* 最近訪れたファイル対応
#+BEGIN_SRC elisp :tangle yes
  ;; 最近訪れたファイル対応
  (defun recentf-base-name ()
    (host-base-name "recentf" ".dat"))

  (defun recentf-file-name ()
    (expand-file-name (locate-user-emacs-file (recentf-base-name))))

  (setq recentf-save-file (recentf-file-name))

  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC

* オプション
現在の起動オプションでは読み込ませたくないので、一時的に除外する。
これは、emacs の起動引数の役割を私が理解していないためである。

#+begin_src elisp :tangle yes
  (defun options-base-name ()
    (sys-base-name "options-experminal" ".el"))

  (defun options-file-name ()
    (expand-file-name (locate-user-emacs-file (options-base-name))))

  (setq custom-file (options-file-name))
  (if (file-exists-p custom-file)
      (load custom-file t nil nil))
#+end_src

#+begin_src elisp :tangle no
  ;; TODO この対策は一時的なものであるため、通常のoptionsに戻すのを忘れないこと
  (when (display-graphic-p)
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     ;;
     '(default ((t (:family "Iosevka" :foundry "UKWN" :slant normal :weight regular :height 140 :width normal))))
     ))
#+end_src

** デスクトップのサイズを記憶
#+begin_src elisp :tangle yes
  ;; デスクトップ環境の保存
  ;; https://www.gnu.org/software/emacs//manual/html_node/emacs/Saving-Emacs-Sessions.html
  (desktop-save-mode 1)
  ;; ホスト名を付加してファイル名衝突回避
  (setq desktop-base-file-name (concat "." (safe-host-name-string) "-emacs.desktop"))
#+end_src

#+begin_src elisp :results output
desktop-path
desktop-base-file-name
(safe-host-name-string)
#+end_src

#+RESULTS:

*** DONE 他のホストと、衝突する恐れがある
単純に導入しただけでは、Nextcloudで共有している他のホストと衝突してしまう。
本来であれば、Nextcloudクライアント側でignore ファイルを共有して回避すべき問題である。
ホスト名を付加して衝突回避できるか要検討。
* 拡張選択範囲
#+BEGIN_SRC elisp :tangle yes
  ;; 拡張選択範囲
  (use-package expand-region
    :ensure t)
  (global-set-key (kbd "C-q") 'er/expand-region)
#+END_SRC

* コード補完
#+BEGIN_SRC elisp :tangle yes
  ;; コード補完
  (use-package company
    :ensure t)
#+END_SRC

* Magit 設定
#+BEGIN_SRC elisp :tangle yes
  ;; Magit 設定
  (use-package magit
    :ensure t
    :pin melpa)

  ;; https://joppot.info/posts/f3007a42-5ba2-4060-90d4-496697413cf9
  (use-package diff-hl
    :ensure t
    :init
    (global-diff-hl-mode)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (unless (window-system) (diff-hl-margin-mode))
    :custom-face
    (diff-hl-change ((t (:background "#8adf80"))))
    (diff-hl-delete ((t (:background "#ff8f88"))))
    (diff-hl-insert ((t (:background "#bfc9ff"))))
    :config
    (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC

* Lisp ファミリ基本設定
#+BEGIN_SRC elisp :tangle yes
  ;; Lisp ファミリ基本設定
  (show-paren-mode t)
  (use-package paredit
    :ensure t
    :commands enable-paredit-mode
    :hook ((emacs-lisp-mode
	    org-mode)
	   . enable-paredit-mode))

  (use-package smartparens :ensure t)
  (use-package rainbow-delimiters :ensure t)
#+END_SRC

** emacs lisp
#+BEGIN_SRC elisp :tangle yes
  ;; emacs lisp
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode)
  ;; (add-hook 'emacs-lisp-mode-hook 'company-mode)
  ;; (add-hook 'emacs-lisp-mode-hook 'subword-mode)
  ;; (add-hook 'emacs-lisp-mode-hook 'aggressive-indent-mode)

  (eval-after-load 'inferior-emacs-lisp-mode
    '(progn
       (add-hook 'ielm-mode-hook 'paredit-mode)
       (define-key paredit-mode-map (kbd "RET") nil)
       (define-key paredit-mode-map (kbd "C-j") 'paredit-newline)))

#+END_SRC

* Org
** 近代化
#+begin_src elisp :tangle yes
  (use-package org-modern
    :ensure t
    :hook ((org-mode . org-modern-mode)))
#+end_src

** =<s <tab>= でブロック文のテンプレートを挿入
#+BEGIN_SRC elisp :tangle yes
  ;; <s <tab> でブロック文のテンプレートを挿入
  (require 'org-tempo)
#+END_SRC

** デフォルトのbabelではシェルは禁止されているの使えるようにする
#+begin_src elisp :tangle yes
  ;; デフォルトのbabelではシェルは禁止されているの使えるようにする
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (shell . t)
     ))
#+end_src
** DONE 起動時に、自動で折りたたむ設定はどうだったっけ
参考: https://takaxp.github.io/org-ja.html
#+begin_src
#+STARTUP: content
#+end_src
#+
** =open-url-at-point= で開かれるブラウザの設定
#+begin_src elisp :tangle yes
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

* お遊び
** ポモドーロタイマに使用する音源を物色中
#+begin_src elisp :results list
  (let ((all-sounds
	 (directory-files-recursively "/usr/share/sounds/sound-icons/" "\\.wav$" nil)))
    (dolist (snd all-sounds)
      (play-sound-file snd))
    all-sounds)
#+end_src

#+RESULTS:
- /usr/share/sounds/sound-icons/canary-long.wav
- /usr/share/sounds/sound-icons/cembalo-1.wav
- /usr/share/sounds/sound-icons/cembalo-10.wav
- /usr/share/sounds/sound-icons/cembalo-11.wav
- /usr/share/sounds/sound-icons/cembalo-12.wav
- /usr/share/sounds/sound-icons/cembalo-2.wav
- /usr/share/sounds/sound-icons/cembalo-3.wav
- /usr/share/sounds/sound-icons/cembalo-6.wav
- /usr/share/sounds/sound-icons/chord-7.wav
- /usr/share/sounds/sound-icons/cockchafer-gentleman-1.wav
- /usr/share/sounds/sound-icons/cymbaly-1.wav
- /usr/share/sounds/sound-icons/electric-piano-3.wav
- /usr/share/sounds/sound-icons/glass-water-1.wav
- /usr/share/sounds/sound-icons/guitar-12.wav
- /usr/share/sounds/sound-icons/guitar-13.wav
- /usr/share/sounds/sound-icons/gummy-cat-2.wav
- /usr/share/sounds/sound-icons/klavichord-4.wav
- /usr/share/sounds/sound-icons/percussion-10.wav
- /usr/share/sounds/sound-icons/percussion-12.wav
- /usr/share/sounds/sound-icons/percussion-28.wav
- /usr/share/sounds/sound-icons/percussion-50.wav
- /usr/share/sounds/sound-icons/piano-3.wav
- /usr/share/sounds/sound-icons/pipe.wav
- /usr/share/sounds/sound-icons/pisk-down-cink.wav
- /usr/share/sounds/sound-icons/pisk-down.wav
- /usr/share/sounds/sound-icons/pisk-up-cink.wav
- /usr/share/sounds/sound-icons/pisk-up.wav
- /usr/share/sounds/sound-icons/prompt.wav
- /usr/share/sounds/sound-icons/trumpet-1.wav
- /usr/share/sounds/sound-icons/trumpet-12.wav
- /usr/share/sounds/sound-icons/violoncello-7.wav
- /usr/share/sounds/sound-icons/xylofon.wav

** eww がローカルのファイルを開けるか
#+begin_src elisp
(eww-browse-url "file:///usr/local/share/GNUstep/Documentation/Developer/Base/ProgrammingManual/gs-base/index.html")
#+end_src

** string-matchの実験
#+begin_src elisp
  (string-match-p "\\.wav$"
		  "/usr/share/sounds/sound-icons/canary-long.wav")
  (string-match-p "^file:///"
		  "file:///usr/local/share/GNUstep/Documentation/Developer/Base/ProgrammingManual/gs-base/index.html")
#+end_src

* ポモドーロタイマー
[[https://systemcrafters.net/emacs-shorts/pomodoro-timer/]]
#+begin_src elisp :tangle yes
  ;; https://systemcrafters.net/emacs-shorts/pomodoro-timer/
  (setq org-clock-sound "/usr/share/sounds/sound-icons/xylofon.wav")
  ;; C-c C-x ;
  (org-timer-set-timer 25)
#+end_src

#+RESULTS:
: /usr/share/sounds/sound-icons/xylofon.wav

* 日本語フォントの設定
** 使用できるフォント名の確認
#+begin_src elisp :results list
  (seq-uniq (sort (font-family-list) 'string<) 'string=)
#+end_src

#+RESULTS:
- Abyssinica SIL
- Ani
- AnjaliOldLipi
- Bitstream Charter
- C059
- Cantarell
- Century Schoolbook L
- Chandas
- Chilanka
- Courier
- Courier 10 Pitch
- D050000L
- DejaVu Sans
- DejaVu Sans Mono
- DejaVu Serif
- Dhurjati
- Dingbats
- Droid Sans Fallback
- Dyuthi
- Fira Code
- FontAwesome
- FreeMono
- FreeSans
- FreeSerif
- Gargi
- Garuda
- Gayathri
- Gidugu
- Gubbi
- Gurajada
- Iosevka
- Jamrul
- KacstArt
- KacstBook
- KacstDecorative
- KacstDigital
- KacstFarsi
- KacstLetter
- KacstNaskh
- KacstOffice
- KacstOne
- KacstPen
- KacstPoster
- KacstQurn
- KacstScreen
- KacstTitle
- KacstTitleL
- Kalapi
- Kalimati
- Karumbi
- Keraleeyam
- Khmer OS
- Khmer OS System
- Kinnari
- LKLUG
- LakkiReddy
- Laksaman
- Latin Modern Math
- Latin Modern Mono
- Latin Modern Mono Caps
- Latin Modern Mono Light
- Latin Modern Mono Light Cond
- Latin Modern Mono Prop
- Latin Modern Mono Prop Light
- Latin Modern Mono Slanted
- Latin Modern Roman
- Latin Modern Roman Caps
- Latin Modern Roman Demi
- Latin Modern Roman Dunhill
- Latin Modern Roman Slanted
- Latin Modern Roman Unslanted
- Latin Modern Sans
- Latin Modern Sans Demi Cond
- Latin Modern Sans Quotation
- Lato
- Liberation Mono
- Liberation Sans
- Liberation Sans Narrow
- Liberation Serif
- Likhan
- Lohit Assamese
- Lohit Bengali
- Lohit Devanagari
- Lohit Gujarati
- Lohit Gurmukhi
- Lohit Kannada
- Lohit Malayalam
- Lohit Odia
- Lohit Tamil
- Lohit Tamil Classical
- Lohit Telugu
- Loma
- Mallanna
- Mandali
- Manjari
- Material Icons
- Meera
- Mitra
- Mukti
- NATS
- NTR
- Nakula
- Navilu
- Nimbus Mono L
- Nimbus Mono PS
- Nimbus Roman
- Nimbus Roman No9 L
- Nimbus Sans
- Nimbus Sans L
- Nimbus Sans Narrow
- Norasi
- Noto Color Emoji
- Noto Mono
- Noto Sans CJK HK
- Noto Sans CJK JP
- Noto Sans CJK KR
- Noto Sans CJK SC
- Noto Sans CJK TC
- Noto Sans Mono
- Noto Sans Mono CJK HK
- Noto Sans Mono CJK JP
- Noto Sans Mono CJK KR
- Noto Sans Mono CJK SC
- Noto Sans Mono CJK TC
- Noto Serif CJK HK
- Noto Serif CJK JP
- Noto Serif CJK KR
- Noto Serif CJK SC
- Noto Serif CJK TC
- OpenSymbol
- P052
- Padauk
- Padauk Book
- Pagul
- Peddana
- Phetsarath OT
- Ponnala
- Pothana2000
- Potti Sreeramulu
- Purisa
- Rachana
- RaghuMalayalamSans
- Ramabhadra
- Ramaraja
- Rasa
- RaviPrakash
- Rekha
- Saab
- Sahadeva
- Samanata
- Samyak Devanagari
- Samyak Gujarati
- Samyak Malayalam
- Samyak Tamil
- Sarai
- Sawasdee
- Sree Krushnadevaraya
- Standard Symbols L
- Standard Symbols PS
- Suranna
- Suravaram
- Suruma
- Syamala Ramana
- Symbols Nerd Font Mono
- TeX Gyre Adventor
- TeX Gyre Bonum
- TeX Gyre Bonum Math
- TeX Gyre Chorus
- TeX Gyre Cursor
- TeX Gyre DejaVu Math
- TeX Gyre Heros
- TeX Gyre Heros Cn
- TeX Gyre Pagella
- TeX Gyre Pagella Math
- TeX Gyre Schola
- TeX Gyre Schola Math
- TeX Gyre Termes
- TeX Gyre Termes Math
- TenaliRamakrishna
- Tibetan Machine Uni
- Timmana
- Tlwg Mono
- Tlwg Typewriter
- Tlwg Typist
- Tlwg Typo
- URW Bookman
- URW Bookman L
- URW Chancery L
- URW Gothic
- URW Gothic L
- URW Palladio L
- Ubuntu
- Ubuntu Condensed
- Ubuntu Mono
- Umpush
- Uroob
- Utopia
- Vemana2000
- Waree
- Weather Icons
- Yrsa
- Z003
- aakar
- all-the-icons
- bitstream charter
- clean
- clearlyu
- clearlyu alternate glyphs
- clearlyu arabic
- clearlyu arabic extra
- clearlyu devanagari
- clearlyu devangari extra
- clearlyu ligature
- clearlyu pua
- courier 10 pitch
- fangsong ti
- file-icons
- fixed
- github-octicons
- gothic
- latin modern roman
- latin modern sans
- latin modern sansquotation
- latin modern typewriter
- latin modern typewriter variable width
- mincho
- mry_KacstQurn
- newspaper
- nil
- open look cursor
- open look glyph
- ori1Uni
- padmaa
- padmaa-Bold.1.1
- song ti
- texgyreadventor
- texgyrebonum
- texgyrechorus
- texgyrecursor
- texgyreheros
- texgyrepagella
- texgyreschola
- texgyretermes

** 日本語の範囲をNotoフォントに設定してみる。
#+begin_src elisp tangle yes
  ;; 日本語の範囲をNotoフォントに設定
  (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Noto Serif CJK JP"))
  ;; (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Noto Sans CJK JP"))
#+end_src

確認のためテーブルがきちんと表示されているかを見る。
|----------------------------------+------------------------|
| this is a header 1               | this is a header2      |
|----------------------------------+------------------------|
| これはヘッダー位置ですよーん漢字 | 揃っているみたいですね |
| カタカナ                         | カタカナ崩れませんか   |
|                                  |                        |
|----------------------------------+------------------------|

* ewwのフォントが汚い件
#+begin_src
M-x eww-toggle-fonts
または
F => Shift-f
#+end_src

* Eglot導入
lspサーバーとの比較のため導入してみる
#+begin_src elisp :tangle yes
  (use-package eglot
    :ensure t
    :hook
    (c-mode . eglot-ensure)
    (c++-mode . eglot-ensure)
    (objc-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '((c-mode c++-mode objc-mode) "ccls")))
#+end_src
* 末尾
#+BEGIN_SRC elisp :tangle yes
  ;; カスタムコマンドのロード
  (require 'kf-command)
  (recentf-open-files)
#+END_SRC
